// Enable DSL2
nextflow.enable.dsl = 2

// Default parameters
params {
    reads = "$baseDir/data/*_{1,2}.fastq.gz"
    outdir = "$baseDir/results"
    min_read_qual = 30
    reporting_threshold = 0.01
    consensus_pct = 20
    length_cutoff = 100
    score_cutoff = 30
    min_variant_qual = 30
    min_dp = 100
    min_ac = 5
    min_freq = 0.01
    xml = "$baseDir/assets/HIVDB_9.0.xml"
    rmd = "$baseDir/assets/report_template.Rmd"
    rmd_static = "$baseDir/assets/report_template_static.Rmd"
    mutation_db_comments = "$baseDir/assets/mutation_comments.csv"
}

// Process-specific configurations
process {
    // General process configuration
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // Process-specific configurations
    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/qcresults-raw-reads" },
            mode: 'copy',
            overwrite: false
        ]
    }
    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/qcresults-raw-reads" },
            mode: 'copy',
            overwrite: false
        ]
    }
    withName: TRIMGALORE {
        publishDir = [
            path: { "${params.outdir}/adaptors-trimmed-reads" },
            mode: 'copy',
            overwrite: false
        ]
    }
    withName: HYDRA {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy'
        ]
    }
    withName: SIERRALOCAL {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy'
        ]
    }
    withName: RENDERREPORT {
        publishDir = [
            path: { "${params.outdir}" },
            mode: 'copy'
        ]
    }
}

// Profiles
profiles {
    standard {
        process.executor = 'local'
    }
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
    }
}

// Manifest
manifest {
    name = 'QuasiFlow'
    author = 'Alfred Ssekagiri'
    homePage = 'https://github.com/AlfredUg/QuasiFlow'
    description = 'A Nextflow pipeline for HIV-1 drug resistance analysis'
    mainScript = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version = '1.0.0'
}

// Function to ensure backward compatibility with -profile
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}