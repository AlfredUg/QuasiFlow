/*
 * SET UP CONFIGURATION VARIABLES
 */

// Configurable variables
params.name = false
params.project = false
params.email = false
params.plaintext_email = false
params.version="1.0.1"

/*
 * SET UP INPUT VARIABLES
 */

params.reads = "$baseDir/test_data/*{1,2}.fastq"
params.rmd = "$baseDir/assets/hivdr.Rmd"
params.rmd_static = "$baseDir/assets/hivdr_static.Rmd"
params.outdir = "$baseDir/results"

//params for HyDRA

params.mutation_db=""

params.reporting_threshold=1

params.consensus_pct=20

params.min_read_qual=30

params.length_cutoff=100

params.score_cutoff=30

params.min_variant_qual=30

params.min_dp=100

params.min_ac=5

params.min_freq=0.01

//params for Sierralocal

params.xml="$baseDir/data/HIVDB_9.1.xml"
params.apobec="$baseDir/data/apobec.tsv"
params.mutation_db_comments = "$baseDir/data/mutation_comments_db.csv"


//specify profiles here
profiles {

  standard{
    includeConfig 'conf/standard.config'
  }
  
  base{
    includeConfig 'conf/base.config'
  }

}

// specify docker containers for third party tools
process {
    withLabel:fastqc {
        container = 'quay.io/biocontainers/fastqc:0.11.8--1'
    }
    withLabel:multiqc {
        container = 'quay.io/biocontainers/multiqc:1.7--py_4'
    }
    withName:runHydra {
        container = 'docker://alfredug/quasitools'
    }
    withName:runSierralocal {
        container = 'docker://alfredug/sierralocal'
    }
    withName:renderReport {
        container = 'docker://alfredug/rbase'
    }
}

//singularity {
    //enabled = true
//}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/QuasiFlow_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/QuasiFlow_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/QuasiFlow_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/QuasiFlow_DAG.html"
}

manifest {
  homePage = 'https://github.com/AlfredUg/QuasiFlow'
  description = 'Nextflow pipeline for analysis of NGS-based HIV drug ressitance Data'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
